h1. Sentinel

Transparent (unobtrusive) Observers for your Rubies.

h2. Why?

Developed for an specific need we had at "Busk":http://www.busk.com, Sentinel is a very small library that provides a way to add what we call "Transparent Observers" to your Ruby code. This means that you do not need to modify the observed methods (following the most common implementation of Observers), just use a mixin and declare your observers.

h2. How?

First, install the gem:

<pre>
$ [sudo] gem install sentinel
</pre>

Then, add it as a dependency in your code using your favorite way (a simple require or mechanisms like the bundler gem).

To use it, first you'll need an observer class that responds to a class method called *_notify_* by default. All the observed method's arguments will be passed to this method, hence the _args_ splat.

<pre>
class MyObserver
  def self.notify(*args)
    puts "Do your thing!"
  end
end
</pre>

Then, simply include the _Sentinel_ module in the observer, setting up the desired class (or classes) and method (or methods) to be observed.

<pre>
class MyObserver
  include Sentinel

  observe MyClass, :instance_method
  observe MyClass, :class_method, :class_method => true #to observe a class method

  def self.notify(*args)
    puts "Do your thing!"
  end
end
</pre>

As you can see, Sentinel can observe both class and instance methods. Now, our actual class:

<pre>
class MyClass
  def instance_method
    puts "Hi from the instance method!"
  end

  def self.class_method
    puts "Hi from the class method!"
  end
end
</pre>

And... that's it! Every time the observed method is called, by default the _notify_ method from the defined _observer class_ will be called *before* it, then it will run normally.

You can also choose another method to call when the observed method is called, instead of the default _notify_ method:

<pre>
class MyObserver
  include Sentinel

  observe MyClass, :instance_method, :method_to_notify => :my_notifier

  def self.my_notifier(*args)
    puts "Do your thing!"
  end
end
</pre>

h2. Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

h3. Copyright

Copyright (c) 2010 Lucas HÃºngaro. See LICENSE for details.
